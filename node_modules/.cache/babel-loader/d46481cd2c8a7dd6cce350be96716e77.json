{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\n\nconst useFetch = (url, options) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return {\n    response,\n    error,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/mst3r/Desktop/React/react-mix-firebase-auth/src/hooks/useFetch.js"],"names":["React","useEffect","useState","useFetch","url","options","response","setResponse","error","setError","isLoading","setIsLoading","fetchData","res","fetch","json"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,YAAY;AAC5BD,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACF,cAAME,GAAG,GAAG,MAAMC,KAAK,CAACV,GAAD,EAAMC,OAAN,CAAvB;AACA,cAAMU,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACAR,QAAAA,WAAW,CAACQ,IAAD,CAAX;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OALD,CAKE,OAAOH,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,KAVD;;AAWAI,IAAAA,SAAS;AACV,GAbQ,EAaN,EAbM,CAAT;AAcA,SAAO;AAAEN,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAnBD;;AAqBA,eAAeP,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst useFetch = (url, options) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, []);\n  return { response, error, isLoading };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}